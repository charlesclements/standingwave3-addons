package{		// Imports.	import com.greensock.events.LoaderEvent;	import com.greensock.loading.LoaderMax;	import com.greensock.loading.MP3Loader;	import flash.display.Sprite;	import flash.events.Event;	import com.greensock.TweenMax;	import com.SW3.gadget.LoopGadget;	import flash.media.Sound;	import com.noteflight.standingwave3.elements.Sample;	import flash.utils.getTimer;	import com.SW3.data.LoopData;		// Class.	public class LoopingWork2 extends Sprite	{			// Vars.		private var loader:LoaderMax;		var looping:LoopGadget = new LoopGadget;				// Constructor.		public function LoopingWork2()		{						trace("LoopingWork2");						loader = new LoaderMax( { name:"audio", onComplete:onSoundsLoaded } );			loader.append( new MP3Loader( "assets/Beat.mp3", { autoPlay:false } ) );			loader.load();					}						private function onSoundsLoaded(e:LoaderEvent):void		{						trace("onSoundsLoaded");			var timer:uint = getTimer();						looping.addLoopSound( "Beat", e.currentTarget.content[ 0 ] as Sound, 0, 10, 0 );						timer = getTimer() - timer;			trace("It took " + timer + " MS to addLoopSound." );						looping.playLoop( "Beat" );						timer = getTimer() - timer;			trace("It took " + timer + " MS to call looping.playLoop with NO offset." );						looping.playLoop( "Beat", 27.3 );// Playing loop with offset is more processor intensive than calling with out offset.			timer = getTimer() - timer;			trace("It took " + timer + " MS to call looping.playLoop WITH offset." );									// Calls to get player position.			delayedCall();			TweenMax.to( {}, 2, { onComplete:delayedCall } );			TweenMax.to( {}, 5, { onComplete:delayedCall } );					}						private function delayedCall():void		{						//trace(looping.getLoopData( "Beat" ).source.position);			trace(looping.getLoopData( "Beat" ).player.position);											}									}		}