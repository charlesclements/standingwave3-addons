package com.SW3.gadget{			// Imports.	import com.greensock.TweenMax;	import com.noteflight.standingwave3.elements.AudioDescriptor;	import com.noteflight.standingwave3.elements.IAudioSource;	import com.noteflight.standingwave3.elements.IDirectAccessSource;	import com.noteflight.standingwave3.elements.Sample;	import com.noteflight.standingwave3.output.AudioPlayer;	import com.noteflight.standingwave3.performance.AudioPerformer;	import com.noteflight.standingwave3.performance.ListPerformance;	import com.noteflight.standingwave3.performance.PerformableAudioSource;	import com.noteflight.standingwave3.sources.SoundSource;	import flash.events.EventDispatcher;	import flash.events.IEventDispatcher;	import flash.media.Sound;	import flash.utils.Dictionary;	import com.SW3.data.LoopData;	import flash.utils.getTimer;			// Class.	public class LoopGadget extends EventDispatcher	{						// Vars.		public var SOUNDS_DICTIONARY:Dictionary = new Dictionary;		public var SOUNDS_ARRAY:Array = [];						// Constructor.		public function LoopGadget(target:IEventDispatcher=null)		{			super(target);		}				/*		// Creates a looped sample from a sound.		public function combineSamples($samples:Array):IAudioSource		{						trace("combineSamples");			var sequence:ListPerformance = new ListPerformance();			for( var i:uint = 0; i < $samples.length; i++ ){ sequence.addSourceAt(0, $samples[ i ] as IAudioSource) };			return new AudioPerformer( sequence, new AudioDescriptor() );					}		*/								// Creates a looped sample from an Array of sounds.		public function combineSamples(samples:Array, loops:uint):IAudioSource		{						trace("LoopGadget - combineSamples : " + samples );						// Get new obj vars.			var o:LoopData;			var s:IAudioSource;						// Create ListPerformance.			var sequence:ListPerformance = new ListPerformance();						// Run thru existing sounds.			for( var i:uint = 0; i < samples.length; i++ )			{				//trace( i );				o = SOUNDS_DICTIONARY[ samples[ i ] ] as LoopData;				s = o.sample as IAudioSource;								// Add samples to sequence.				for( var k:uint = 0; k < loops; k++ ) sequence.addSourceAt( k * s.frameCount, s.clone() as IAudioSource );							}						var audioPerformer:AudioPerformer = new AudioPerformer( sequence, new AudioDescriptor() );			audioPerformer.resetPosition();						//trace("LoopGadget - combineSamples - END" );			return audioPerformer;					}												// Add the Sound Sample to an internal Dictionary.		public function addLoopSound(id:String, sound:Sound, loopStart:Number=0, loopEnd:Number=-1, startPlayingAt:uint=0, loops:uint=1000):void		{						trace( "LoopGadget - addLoopSound : " + id );			// Placed condition in try/catch in case of error.			try			{								if( SOUNDS_DICTIONARY[ id ] != null ) 				{										trace( "LoopGadget - addLoopSound : " + id + " : Loop already exists." ); 					return;									}							}			catch(e:Error)			{								trace( "LoopGadget - addLoopSound : " + id + " : Can be created." ); 							}						// Create loop stuff here.			var length:Number = sound.length * 44.1;			var ss:SoundSource = new SoundSource( sound, new AudioDescriptor );			var begin:uint = ( loopStart * length ) / ss.duration;			var end:uint = ( loopEnd > -1 ) ? ( loopEnd * length ) / ss.duration : length;			var start:uint = ( startPlayingAt * length ) / ss.duration;						var sample:Sample = ss.getSampleRange( begin, end );			sample.normalize();						// Update the LoopData vars.			_update( id, sample, loopStart, loopEnd, startPlayingAt, loops );					}						private function _update(id:String, sample:Sample, loopStart:Number=0, loopEnd:Number=-1, startPlayingAt:uint=0, loops:uint=1000):void		{						//trace( "LoopGadget - _update : " + id );						var length:Number = sample.frameCount;			var begin:uint = ( loopStart * length ) / sample.duration;			var end:uint = ( loopEnd > -1 ) ? ( loopEnd * length ) / sample.duration : length;			var start:uint = ( startPlayingAt * length ) / sample.duration;						var introSample:Sample = sample.getSampleRange( start, end );			introSample.normalize();						// Create ListPerformance.			var sequence:ListPerformance = new ListPerformance();			sequence.addSourceAt( 0, introSample.clone() );						for( var i:uint = 0; i < loops; i++ ) sequence.addSourceAt( loopEnd - startPlayingAt + ( i * loopEnd ), sample.clone() );						// Set new obj vars.			var o:LoopData = ( SOUNDS_DICTIONARY[ id ] ) ? SOUNDS_DICTIONARY[ id ] : new LoopData;			o.sample = sample;			o.source = new AudioPerformer(sequence, new AudioDescriptor );			o.player = new AudioPlayer;			o.isPlaying = false;			o.loopStart = loopStart;			o.loopEnd = loopEnd;			o.startPlayingAt = startPlayingAt;			o.loops = loops;						// Add to Dictionary and Array.			SOUNDS_DICTIONARY[ id ] = o;			SOUNDS_ARRAY.push( id );					}						// Plays a particular sound.		public function playLoop(id:String, startPlayingAt:Number=-1):void		{						// Check to see if Object exists, and decide accordingly.			if( SOUNDS_DICTIONARY[ id ] ) 			{												var o:LoopData = SOUNDS_DICTIONARY[ id ] as LoopData;				// Stop sound if playing.				if( o.player.channel ) { o.player.stop( o.source ); o.isPlaying = false; }								// Check to see if the starting point is offset.				if( startPlayingAt > 0 ) 				{										startPlayingAt = startPlayingAt % o.sample.duration;					//trace("LoopGadget - playLoop : " + id + " - offset startPlayingAt : " + startPlayingAt);					_update( id, o.sample, o.loopStart, o.loopEnd, startPlayingAt, o.loops );									}				//else trace("LoopGadget - playLoop : " + id );								// Play audio.				o.player = new AudioPlayer;				o.player.play( o.source );				o.isPlaying = true;							}			else			{								trace( "LoopGadget - playLoop : Cannot play " + id + " - because it does not exist or has not been added.");							}					}						// Plays an Array of loops by ID's passed in..		public function playLoops($loopIDs:Array, $stopAllOthers:Boolean=false):void		{						trace("LoopGadget - playLoops : " + $loopIDs);						// Stop all others if true.			if( $stopAllOthers ) stopAllLoops();						for( var i:uint = 0; i < $loopIDs.length; i++ ) 			{								// Check to see if Object exists, and decide accordingly.				if( SOUNDS_DICTIONARY[ $loopIDs[ i ] ] ) var o:LoopData = SOUNDS_DICTIONARY[ $loopIDs[ i ] ] as LoopData;				else				{										trace( "LoopGadget - playLoops : " + $loopIDs[ i ] + " - does not exist or has not been added.");					continue;									}								// Checks to see if the audio is playing.				if( !o.isPlaying )				{										o.source.resetPosition();					o.player = new AudioPlayer;					o.player.play( o.source );					o.isPlaying = true;									}							}					}						// Stops a particular loop.		public function stopLoop(id:String):void		{						// Check to see if Object exists, and decide accordingly.			if( SOUNDS_DICTIONARY[ id ] ) var o:LoopData = SOUNDS_DICTIONARY[ id ] as LoopData;			else			{								trace( "LoopGadget - stopLoop : Cannot stop " + id + " - because it does not exist or has not been added.");				return;							}						trace("LoopGadget - stopLoop : " + id);			if( o.player.channel ) o.player.stop();			o.isPlaying = false;					}						// Stops all existing loops.		public function stopAllLoops():void		{						trace("LoopGadget - stopAllLoops");			for( var i:uint = 0; i < SOUNDS_ARRAY.length; i++ ) 			{								//trace(i);				var o:LoopData = SOUNDS_DICTIONARY[ SOUNDS_ARRAY[ i ] ] as LoopData;				o.player.stop( o.source );				o.isPlaying = false;							}			//trace("LoopGadget - stopAllLoops - END");					}				public function contains(id:String):Boolean		{						var b:Boolean = ( SOUNDS_DICTIONARY[ id ] != null ) ? true : false;			trace("LoopGadget - contains : " + id + " = " + b );			return b;					}						public function getLoopData(id:String):LoopData		{						trace( "getLoopData" );			if( SOUNDS_DICTIONARY[ id ] ) return SOUNDS_DICTIONARY[ id ] as LoopData;			else return null;					}						// Stops all existing loops.		public function fadeOthers(idToKeep:String, $gainLevelToFadeOthersTo:Number=0.5):void		{						trace("LoopGadget - fadeOthers - Not implemented yet");						for( var i:uint = 0; i < SOUNDS_ARRAY.length; i++ ) 			{								trace(i);								var o:Object = SOUNDS_DICTIONARY[ SOUNDS_ARRAY[ i ] ] as LoopData;				o.isPlaying = false;								// Do fading.				if( o.isPlaying && o.id != idToKeep ) TweenMax.to( o.sample, 1, { onUpdate:o.sample.changeGain, onUpdateParams:[ $gainLevelToFadeOthersTo, -1 * $gainLevelToFadeOthersTo ] } );				else if( o.id == idToKeep ) TweenMax.to( o.sample, 1, { onUpdate:o.sample.changeGain, onUpdateParams:[ 0.99, -0.99 ] } );			}			//trace("LoopGadget - stopAllLoops - END");					}						// 		public function removeLoopSound(id:String):void		{						trace("LoopGadget - removeLoopSound - Not implemented yet : " + id);					}						// 		public function removeAllLoopSounds():void		{						trace("LoopGadget - removeAllLoopSounds - Not implemented yet.");					}			}		}