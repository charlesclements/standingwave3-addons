package com.SW3.player{			// Imoports.	import com.noteflight.standingwave3.output.AudioPlayer;	import com.noteflight.standingwave3.elements.IAudioSource;	import com.noteflight.standingwave3.performance.ListPerformance;	import com.noteflight.standingwave3.performance.AudioPerformer;	import com.noteflight.standingwave3.sources.SineSource;	import com.noteflight.standingwave3.elements.AudioDescriptor;			// Class.	public class SilentContinuousPlayer extends Object	{						// Vars.		private var _source:IAudioSource;		private var _player:AudioPlayer;		private var _list:ListPerformance;		private var _performer:AudioPerformer;		private var _paused:Boolean;						// Constructor.		public function SilentContinuousPlayer(framesPerCallback:Number=4096)		{						super();			_source = new SineSource(new AudioDescriptor(), 10000, 220, 0.5);			_player = new AudioPlayer;			_list = new ListPerformance;			_list.addSourceAt( 0, _source, -50 );			_performer = new AudioPerformer( _list, new AudioDescriptor );			_paused = false;					}								// Plays continuous silent audio.		public function play():void		{						if( _player.channel ) _player.stop( _performer );			_player.play( _performer );					}						// Stops continuous silent audio.		public function stop():void		{						if( _player.channel ) _player.stop( _performer );					}								// Puases the audio.		public function pause():void		{						if( _player.channel ) _player.pause(); _paused = true;					}								// Resumes paused continuous silent audio.		public function resume():void		{						if( _player.channel ) _player.resume(); _paused = false;					}							// Returns the postion of the audio.		public function get paused():Boolean		{						return _paused;					}						// Returns the postion of the audio.		public function get position():uint		{						if( _player.channel ) return _player.source.position;			else return 0;					}							// Returns the postion of the audio in milliseconds.		public function get positionInMilliseconds():uint		{						if( _player.channel ) return _player.source.position / _player.source.descriptor.rate * 1000;			else return 0;					}						// Returns the postion of the audio in econds.		public function get positionInSeconds():Number		{						if( _player.channel ) return _player.source.position / _player.source.descriptor.rate;			else return 0;					}						}}